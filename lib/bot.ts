import { Bot, InlineKeyboard } from "https://deno.land/x/grammy@v1.32.0/mod.ts";

import { changesKeyboard, menuKeyboard, yesOrNo, coffeeKeyboard, interesKeyboard, acceptKeyboard  } from "./keyboards.ts"; // –∏–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä

import { MyContext, UserInfo, UserData } from "./interfaces.ts"; //–∏–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤

import { reviewProfile, setState } from "./functions.ts"; //–∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π


//–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö deno
export const database = await Deno.openKv();

export const bot = new Bot<MyContext>(Deno.env.get("BOT_TOKEN") || "7785377297:AAHQXYH32S0fE5TOZvuN1GPxxAnHOvT0OXg");



// info –±—É–¥–µ—Ç –Ω—É–∂–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ (–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è) - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ  
export const info: UserInfo = {
  id: 0,
  name: "",
  age: 0,
  interests: "",
  coffee:"",
  done: false,
  state: "",
};

bot.command("start", async (ctx) => { // –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
  info.id = Number(ctx.msg.from?.id);
  if (Boolean((await database.get(["users", info.id, "done"])).value) != false) {
    // –æ–ø–∏—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å?
    info.name = String((await database.get(["users", info.id, "name"])).value);
    info.age = Number((await database.get(["users", info.id, "age"])).value);
    info.interests = Array(
      String((await database.get(["users", info.id, "interests"])).value),
    );

    info.time = String((await database.get(["users", info.id, "state"])).value);
    info.state = String(
      (await database.get(["users", info.id, "state"])).value,
    );
    info.rating = Number(
      (await database.get(["users", info.id, "rating"])).value,
    );
    await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${info.name}!`, { reply_markup: menuKeyboard });
  } else {
    await ctx.reply(
      "–ô–æ—É, —á—ë –∫–∞–∫?! \n–¢—ã —Ç—É—Ç –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑. –¢–æ–≥–¥–∞ –ø–æ—è—Å–Ω—é. \n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –∑–∞–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è, –ø–æ–æ–±—â–∞—Ç—Å—è. –¢—ã –Ω–µ –ø—Ä–æ—Ç–∏–≤? \n–¢–æ–≥–¥–∞ –Ω–∞—á–Ω—ë–º!",
    );
    await ctx.reply(
      "–ó–≤–∞—Ç—å —Ç–æ —Ç–µ–±—è –∫–∞–∫? –ê –ø—Ä–æ–∑–≤–∏—â–µ —Ç–æ –µ—Å—Ç—å?",
    );
    setState("setName"); // —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–¥—Ç–∏ –∏–º—è
  }
});
// –ö–æ–º–∞–Ω–¥–∞ /like
bot.command("like", async (ctx) => {
    const userId = ctx.from?.id.toString();
    if (!userId) return;

    // –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    if (!ratings[userId]) {
        ratings[userId] = { likes: 0, dislikes: 0 };
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ "–Ω—Ä–∞–≤–∏—Ç—Å—è"
    ratings[userId].likes += 1;

    await ctx.reply("–°–ø–∞—Å–∏–±–æ! –¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. üëç");
});

// –ö–æ–º–∞–Ω–¥–∞ /dislike
bot.command("dislike", async (ctx) => {
    const userId = ctx.from?.id.toString();
    if (!userId) return;

    // –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    if (!ratings[userId]) {
        ratings[userId] = { likes: 0, dislikes: 0 };
    }

   // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ "–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"
    ratings[userId].dislikes += 1;

    await ctx.reply("–°–ø–∞—Å–∏–±–æ! –¢–µ–±–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. üëé");
});

// –ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ü–µ–Ω–æ–∫
bot.command("stats", async (ctx) => {
    const userId = ctx.from?.id.toString();
    const userRatings = ratings[userId] || { likes: 0, dislikes: 0 };
    const response = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ù—Ä–∞–≤–∏—Ç—Å—è: ${userRatings.likes}, –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è: ${userRatings.dislikes}`;
    await ctx.reply(response);
});
//–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
bot.callbackQuery("interestsDone", async (ctx) => {
  await ctx.deleteMessage();
  await ctx.reply("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ");
  await reviewProfile(ctx);
});

bot.callbackQuery("interestsNotDone", async (ctx) => {
  await ctx.deleteMessage();
  await ctx.reply("–ü–∏—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è");
  setState("setInterests"); // —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–¥—Ç–∏ –∏–º—è
});

bot.hears(
  ["–ø—Ä–æ—Ñ–∏–ª—å", "–ü—Ä–æ—Ñ–∏–ª—å", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§"],
  async (ctx) => {
    await reviewProfile(ctx);
  },
);

bot.on("message", async (ctx) => {
  if (info.state) { // –ø—Ä–∏ –Ω–µ–ø—É—Å—Ç–æ–º info.state
    switch (info.state) {
      case "setName":
        if (
          typeof ctx.msg.text !== "string" ||
          /[0-9_.*^%$#@!]/.test(ctx.msg.text) // —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤
        ) {
          await ctx.reply(
            "–ö–æ—Å—è–∫! –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–∞ –∏ —Å–∏–º–≤–æ–ª—ã",
          );
          return;
        } else {
          info.name = ctx.msg.text || ""; //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
          await ctx.reply("–ù—É, –ø—Ä–æ—Ö–æ–¥–∏ —Ç–æ–≥–¥–∞ " + info.name + "!");
          await ctx.reply("–°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ç–æ —Ç–µ–±–µ?");
          setState("setAge");
        }
        break;

      case "setAge":
        if (isNaN(Number(ctx.msg.text))) {
          await ctx.reply("–ò–∑–≤–∏–Ω–∏, –Ω–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º!");
          return;
        }
        info.age = Number(ctx.msg.text);
        await ctx.reply("–ö—Ä—É—Ç–æ! –í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã!");
        await ctx.reply("1 - Coddin–ø 2 -Web-desigm 3 - SMM 4 UX-design 5 - UI-design 6 - PC-building, 7 -PC-repair");
        setState("setInterests");
        break;

        
      case "setInterests":
       // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await ctx.reply("–î–∞–≤–∞–π, –≤–≤–µ–¥–∏ –∫–æ—Ñ–µ–π–Ω—é, –≥–¥–µ —Ö–æ—á–µ—à—å –∫–æ—Ñ–µ –ø–æ–ø–∏—Ç—å")
        await ctx.reply("1 -–°–∫—É—Ä–∞—Ç–æ–≤. 70 –ª–µ—Ç –û–∫—Ç—è–±—Ä—è, 7.  2 –°–∫—É—Ä–∞—Ç–æ–≤. –ú–∏—Ä–∞, 7–ê.   3 -–°–∫—É—Ä–∞—Ç–æ–≤. –ö—Ä–∞—Å–Ω—ã–π –ü—É—Ç—å, 63. 4 - –°–∫—É—Ä–∞—Ç–æ–≤. –ò—Ä—Ç—ã—à—Å–∫–∞—è –ù–∞–±–µ—Ä–µ–∂–Ω–∞—è, 30.  5 - –≠–Ω–∏—Ç–∞–π–º. –õ–æ–±–∫–æ–≤–∞, 6/1.")
        setState("setCoffee");
        break;


      case "setCoffee":
        await ctx.reply(
          "–•–æ—Ä–æ—à–æ! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ñ–¥–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–ø–∏—Ç—å –∫–æ—Ñ–µ–π–∫—É!",
        );
        break;

      case "review":
        switch (ctx.msg.text) {
          case "–î–∞!":
            info.done = true
            await ctx.reply("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ");
            await database.set(["users", info.id, "name"], info.name);
            await database.set(["users", info.id, "age"], info.age);
            await database.set(["users", info.id, "interests"], info.interests);
            await database.set(["users", info.id, "coffee"], info.coffee);

            break;

          case "–ù–µ—Ç, —Ö–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å":
            setState("changeProfile");
            await ctx.reply("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å", {
              reply_markup: changesKeyboard,
            });
            break;

          default:
            await ctx.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç");
            break;
        }
        break;
      case "changeProfile":
        switch (ctx.msg.text) {
          case "–ò–º—è":
            await ctx.reply("–ú–µ–Ω—è–π –∏–º—è –∏–ª–∏ –ø—Ä–æ–∑–≤–∏—â–µ")
            break;
          case "–í–æ–∑—Ä–∞—Å—Ç":
            await ctx.reply("–¢—ã –∫–∞–∫ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ –≤—ã—Ä–æ—Å?")
            break;
          case "–ì–µ–æ–ø–æ–∑–∏—Ü–∏—é":
            await ctx.reply("–ú–µ—Å—Ç–æ –º–µ–Ω—è–µ—à—å? –î–∞ —á—Ç–æ –∂–µ —Ç–∞–∫–æ–µ!")
            break;
          case "–ò–Ω—Ç–µ—Ä–µ—Å—ã":
            await ctx.reply("–¢—ã –±—ã—Å—Ç–æ –ø–µ—Ä–µ–æ–±—É–ª—Å—è!")
            break;
          case "–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è":
            await ctx.reply("–ú–µ–Ω—è–π –≤—Ä–µ–º—è")
            break;
          case "–•–æ—á—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ":
            await ctx.reply("–£–¥–∞–ª—è—é –ø—Ä–∏ —Ç–µ–±–µ!")
            break;
          default:
            await ctx.reply("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç")
            break;
        }
        break;

      
      default:
    break;
    }
  }
});
